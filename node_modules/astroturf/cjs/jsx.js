"use strict";

exports.__esModule = true;
exports.default = void 0;
exports.jsx = jsx;
exports.jsx2 = jsx2;
exports.resolveVariants = void 0;
exports.varsToStyles = varsToStyles;
var _react = require("react");
exports.F = _react.Fragment;
const _excluded = ["css", "className"];
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
const resolveVariants = variants => !variants ? '' : variants.filter(Boolean).join(' ');
exports.resolveVariants = resolveVariants;
function varsToStyles(props, vars) {
  if (!vars || !vars.length) return props.style;
  const style = Object.assign({}, props.style);
  vars.forEach(([id, value, unit = '']) => {
    const result = typeof value === 'function' ? value(props) : value;
    style[`--${id}`] = `${result}${unit}`;
  });
  return style;
}
function jsx2(fn, type, props, ...args) {
  if (props && props.css) {
    const {
        css,
        className
      } = props,
      childProps = _objectWithoutPropertiesLoose(props, _excluded);
    const componentClassName = css[0].cls2 || css[0].cls1;
    childProps.style = varsToStyles(childProps, css[1]);
    childProps.className = `${className ? `${className} ${componentClassName}` : componentClassName} ${resolveVariants(css[2])}`;
    props = childProps;
  }
  return fn(type, props, ...args);
}
function jsx(type, props, ...children) {
  return jsx2(_react.createElement, type, props, ...children);
}
jsx.F = _react.Fragment;
jsx.jsx2 = jsx2;

// the reason for the crazy exports here is that you need to do a BUNCH of work
// to keep typescript from eliding (removing) the jsx imports
// see: https://github.com/babel/babel/pull/11523
var _default = jsx;
exports.default = _default;