"use strict";

exports.__esModule = true;
exports.default = addPragma;
var _helperModuleImports = require("@babel/helper-module-imports");
var _template = _interopRequireDefault(require("@babel/template"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const opts = {
  placeholderPattern: false,
  placeholderWhitelist: new Set(['JSX', 'JSX_FRAG'])
};

// This pattern of imports is necessary otherwise babel typescript will
// remove the import as "type only"
const importPattern = 'import JSX from "astroturf/jsx";';
const buildImport = (0, _template.default)(importPattern, opts);
const requirePattern = 'const JSX = require("astroturf/jsx");';
const buildRequire = (0, _template.default)(requirePattern, opts);
function addPragma(path, JSX, insertComments = true) {
  const [builder, pattern] = (0, _helperModuleImports.isModule)(path) ? [buildImport, importPattern] : [buildRequire, requirePattern];
  const importNode = builder({
    JSX
  });

  // see importInjector for note about blockHoist
  const targetPath = path.get('body').find(p => {
    // @ts-ignore
    const blockHoist = p.node._blockHoist; // eslint-disable-line no-underscore-dangle
    return blockHoist != null && blockHoist < 4;
  });
  if (targetPath) targetPath.insertBefore(importNode);else path.unshiftContainer('body', importNode);
  const changes = [];
  if (insertComments) {
    const jsxPrgama = `* @jsx ${JSX.name} `;
    const jsxFragPrgama = `* @jsxFrag ${JSX.name}.F `;
    path.addComment('leading', '* @jsxRuntime classic');
    path.addComment('leading', jsxPrgama);
    path.addComment('leading', jsxFragPrgama);
    changes.push({
      type: 'pragma',
      code: `/** @jsxRuntime classic*/\n`,
      start: 0,
      end: 0
    }, {
      type: 'pragma',
      code: `/*${jsxPrgama}*/\n`,
      start: 0,
      end: 0
    }, {
      type: 'pragma',
      code: `/*${jsxFragPrgama}*/\n\n`,
      start: 0,
      end: 0
    });
  }
  changes.push({
    type: 'pragma',
    code: `${pattern.replace('JSX', JSX.name)}\n`,
    start: 0,
    end: 0
  });
  return changes;
}