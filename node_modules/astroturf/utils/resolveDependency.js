"use strict";

exports.__esModule = true;
exports.default = resolveDependency;
var _path = require("path");
var _resolve = _interopRequireDefault(require("resolve"));
var _createFilename = require("./createFilename");
var _getNameFromPath = _interopRequireDefault(require("./getNameFromPath"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function defaultResolver({
  request
}, localStyle, _node) {
  const source = _resolve.default.sync(request, {
    basedir: (0, _path.dirname)(localStyle.absoluteFilePath)
  });
  return {
    source
  };
}
function getImported(path, dependency) {
  const {
    type
  } = dependency;
  if (!type) {
    if (!path.isMemberExpression()) return 'cls1';
    return path.get('property').node.name;
  }
  return type === 'stylesheet' ? path.get('property').node.name : 'cls1';
}
function resolveMemberExpression(path) {
  let nextPath = path.resolve();
  while (nextPath && nextPath.isMemberExpression()) {
    nextPath = nextPath.get('object').resolve();
  }
  return nextPath;
}
function resolveImport(path) {
  const resolvedPath = resolveMemberExpression(path);
  const binding = 'name' in resolvedPath.node && typeof resolvedPath.node.name === 'string' && resolvedPath.scope.getBinding(resolvedPath.node.name);
  if (!binding || binding.kind !== 'module') return null;
  const importPath = binding.path;
  const parent = importPath.parentPath;
  if (!parent.isImportDeclaration()) return null;
  const request = parent.node.source.value;
  let identifier = '';
  if (importPath.isImportNamespaceSpecifier()) {
    if (!path.isMemberExpression()) throw new Error('this is weird');
    identifier = (0, _getNameFromPath.default)(path.get('property'));
  } else if (importPath.isImportDefaultSpecifier()) {
    identifier = (0, _getNameFromPath.default)(resolvedPath);
  } else if (importPath.isImportSpecifier()) {
    // TODO: this isn't correct doesn't do member expressions
    identifier = (0, _getNameFromPath.default)(importPath.get('imported'));
  }
  return {
    identifier,
    request,
    type: importPath.node.type
  };
}
function resolveDependency(path, nodeMap, localStyle, pluginOptions) {
  const {
    getRequirePath = _createFilename.createRequirePath,
    resolveDependency: resolver = defaultResolver
  } = pluginOptions;
  const resolvedPath = resolveMemberExpression(path);
  const style = resolvedPath && nodeMap.get(resolvedPath.node);
  if (style) {
    return {
      type: style.type,
      imported: style.type === 'stylesheet' ? path.get('property').node.name : 'cls1',
      source: getRequirePath(localStyle.hostFilePath, style.absoluteFilePath, style.identifier || '')
    };
  }
  if (resolver) {
    const resolvedImport = resolveImport(path);
    if (resolvedImport) {
      var _resolver;
      const dep = (_resolver = resolver(resolvedImport, localStyle, path.node)) != null ? _resolver : null;
      if (!dep) return null;
      return {
        ...dep,
        imported: dep.imported || getImported(path, dep)
      };
    }
  }
  return null;
}