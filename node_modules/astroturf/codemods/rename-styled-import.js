"use strict";

exports.__esModule = true;
exports.default = plugin;
var t = _interopRequireWildcard(require("@babel/types"));
var _getName = _interopRequireDefault(require("../utils/getName"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function plugin() {
  return {
    name: 'rename-styled-import',
    visitor: {
      ImportDeclaration(path) {
        if (path.get('source').node.value !== 'astroturf') {
          return;
        }
        const styled = path.get('specifiers').find(s => s.isImportDefaultSpecifier() || s.isImportSpecifier() && (0, _getName.default)(s.node.imported) === 'styled');
        if (!styled) return;

        // used to be exported as both a named and default
        if (styled.isImportSpecifier()) {
          // @ts-ignore
          path.unshiftContainer('specifiers', t.importDefaultSpecifier(t.identifier(styled.node.local.name)));
          styled.remove();
        }
        path.get('source').replaceWith(t.stringLiteral('astroturf/react'));
      }
    }
  };
}