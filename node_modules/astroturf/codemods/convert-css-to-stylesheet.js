"use strict";

exports.__esModule = true;
exports.default = plugin;
var t = _interopRequireWildcard(require("@babel/types"));
var _getName = _interopRequireDefault(require("../utils/getName"));
var _isCssTag = _interopRequireDefault(require("../utils/isCssTag"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function plugin() {
  return {
    name: 'convert-css-to-stylesheet',
    visitor: {
      Program: {
        exit(program, state) {
          const {
            stylesheetTagName = 'stylesheet'
          } = state.opts;
          const safeToRemove = !state.file.get('HAS_LEGIT_CSS');
          const shouldAdd = state.file.get('HAS_STYLESHEET');
          program.traverse({
            ImportDeclaration(path) {
              if (path.get('source').node.value !== 'astroturf' && path.get('source').node.value !== 'astroturf/react') return;
              const cssImport = path.get('specifiers').find(s => s.isImportSpecifier() && (0, _getName.default)(s.node.imported) === 'css');
              if (shouldAdd) {
                // @ts-ignore
                path.unshiftContainer('specifiers', t.importSpecifier(t.identifier(stylesheetTagName), t.identifier('stylesheet')));
              }
              if (safeToRemove) {
                if (cssImport) cssImport.remove();
              }
            }
          });
        }
      },
      TaggedTemplateExpression(path, state) {
        const {
          cssTagName = 'css',
          stylesheetTagName = 'stylesheet',
          allowGlobal = false
        } = state.opts;
        const tagPath = path.get('tag');
        if (stylesheetTagName === false || !(0, _isCssTag.default)(tagPath, {
          cssTagName,
          allowGlobal
        })) {
          return;
        }
        if (path.findParent(p => p.isJSXAttribute())) {
          state.file.set('HAS_LEGIT_CSS', true);
          return;
        }
        state.file.set('HAS_STYLESHEET', true);
        tagPath.replaceWith(t.identifier(stylesheetTagName));
      }
    }
  };
}