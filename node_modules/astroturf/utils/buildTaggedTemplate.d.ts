import { NodePath } from '@babel/core';
import * as t from '@babel/types';
import { NodeStyleMap, ResolvedOptions, Style } from '../types';
export declare type Vars = t.ArrayExpression[];
export declare type Variants = t.Expression[];
export declare type TagLocation = 'STYLESHEET' | 'RULE' | 'COMPONENT' | 'PROP';
export interface DynamicInterpolation {
    id: string;
    unit: string;
    expr: NodePath<t.Expression>;
}
interface Options {
    quasiPath: NodePath<t.TemplateLiteral>;
    importId?: t.Identifier;
    nodeMap: NodeStyleMap;
    location: TagLocation;
    allowVariants?: boolean;
    pluginOptions: ResolvedOptions;
    style: Style;
}
export default function buildTaggedTemplate(opts: Options): {
    css: string;
    interpolations: {
        id: string;
        unit: string;
    }[];
    vars: t.ArrayExpression;
    variants: t.ArrayExpression;
};
export {};
