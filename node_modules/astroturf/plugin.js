"use strict";

exports.__esModule = true;
exports.default = plugin;
var _fs = require("fs");
var _path = require("path");
var _generator = _interopRequireDefault(require("@babel/generator"));
var _traverse = require("@babel/traverse");
var t = _interopRequireWildcard(require("@babel/types"));
var _commonTags = require("common-tags");
var _defaults = _interopRequireDefault(require("lodash/defaults"));
var _cssProp = _interopRequireDefault(require("./features/css-prop"));
var _styledComponent = _interopRequireDefault(require("./features/styled-component"));
var _stylesheet = _interopRequireDefault(require("./features/stylesheet"));
var _ImportInjector = _interopRequireDefault(require("./utils/ImportInjector"));
var _Symbols = require("./utils/Symbols");
var _getName = _interopRequireDefault(require("./utils/getName"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// @ts-ignore

function plugin() {
  return {
    pre(file) {
      file.set(_Symbols.IMPORTS, []);
      if (!file.has(_Symbols.STYLES)) {
        file.set(_Symbols.STYLES, {
          id: 0,
          changeset: [],
          styles: new Map()
        });
      }
      if (!file.has(_Symbols.COMPONENTS)) {
        file.set(_Symbols.COMPONENTS, new Map());
      }
    },
    post(file) {
      const {
        opts
      } = this;
      // eslint-disable-next-line prefer-const
      let {
        styles,
        changeset
      } = file.get(_Symbols.STYLES);
      const styleList = Array.from(styles.values());
      changeset = changeset.concat(styleList);
      file.metadata.astroturf = {
        styles: styleList,
        changeset
      };
      if (opts.writeFiles !== false) {
        styles.forEach(({
          absoluteFilePath,
          value
        }) => {
          // @ts-ignore
          (0, _fs.mkdirSync)((0, _path.dirname)(absoluteFilePath), {
            recursive: true
          });
          (0, _fs.writeFileSync)(absoluteFilePath, (0, _commonTags.stripIndent)([value]));
        });
      }
    },
    visitor: _traverse.visitors.merge([{
      Program: {
        enter(path, state) {
          state.styleImports = new _ImportInjector.default(path);
          state.defaultedOptions = (0, _defaults.default)(state.opts, {
            nesting: 'auto',
            extension: '.module.css',
            cssTagName: 'css',
            styledTagName: 'styled',
            stylesheetTagName: 'stylesheet',
            allowGlobal: false,
            enableCssProp: true,
            jsxPragma: true,
            enableDynamicInterpolations: 'cssProp',
            experiments: {}
          });
          const pragma = state.defaultedOptions.jsxPragma;

          // We need to re-export Fragment because of
          // https://github.com/babel/babel/pull/7996#issuecomment-519653431
          state[_Symbols.JSX_IDENTS] = {
            jsx: typeof pragma === 'string' ? t.identifier(pragma) : path.scope.generateUidIdentifier('j')
          };
        }
      },
      ImportDeclaration: {
        exit(path, state) {
          const {
            cssTagName,
            stylesheetTagName
          } = state.defaultedOptions;
          const specifiers = path.get('specifiers');
          const tagImports = path.get('specifiers').filter(p => p.isImportSpecifier() && ['css', 'stylesheet'].includes((0, _getName.default)(p.node.imported)) && [cssTagName, stylesheetTagName].includes(p.node.local.name));
          if (!tagImports.length) return;
          // if the tagImports are ALL of the imported values then we want
          // to pass the entire import to be removed.

          state.file.get(_Symbols.IMPORTS).push({
            path,
            specifiers: specifiers.length === tagImports.length ? null : tagImports
          });
        }
      }
    }, _cssProp.default, _styledComponent.default, _stylesheet.default, {
      Program: {
        exit(_, {
          opts,
          file,
          styleImports
        }) {
          // eslint-disable-next-line prefer-const
          let {
            changeset
          } = file.get(_Symbols.STYLES);
          const importNodes = file.get(_Symbols.IMPORTS);
          importNodes.forEach(({
            path,
            specifiers
          }) => {
            if (!path) return;
            const {
              start,
              end
            } = path.node;
            if (specifiers) {
              specifiers.forEach(s => s.remove());
            } else {
              path.remove();
            }
            if (opts.generateInterpolations) changeset.push({
              type: 'import-optimization',
              start: start,
              end: end,
              // if the path is just a removed specifier we need to regenerate
              // the import statement otherwise we remove the entire declaration
              code: specifiers ? (0, _generator.default)(path.node).code : ''
            });
          });
          changeset.push(styleImports.inject());
        }
      }
    }])
  };
}