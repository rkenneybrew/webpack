"use strict";

exports.__esModule = true;
exports.default = void 0;
var t = _interopRequireWildcard(require("@babel/types"));
var _Symbols = require("../utils/Symbols");
var _buildTaggedTemplate = _interopRequireDefault(require("../utils/buildTaggedTemplate"));
var _createStyleNode = _interopRequireDefault(require("../utils/createStyleNode"));
var _getDisplayName = _interopRequireDefault(require("../utils/getDisplayName"));
var _isCssTag = _interopRequireDefault(require("../utils/isCssTag"));
var _isStylesheetTag = _interopRequireDefault(require("../utils/isStylesheetTag"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function buildStyleRequire(path, opts, isSingleClass) {
  const {
    cssTagName,
    stylesheetTagName
  } = opts.defaultedOptions;
  const {
    styles
  } = opts.file.get(_Symbols.STYLES);
  const nodeMap = opts.file.get(_Symbols.COMPONENTS);
  const tagName = isSingleClass ? cssTagName : stylesheetTagName;
  const baseStyle = (0, _createStyleNode.default)(path, (0, _getDisplayName.default)(path, opts) || undefined, {
    pluginOptions: opts.defaultedOptions,
    file: opts.file
  });
  const style = {
    ...baseStyle,
    type: isSingleClass ? 'class' : 'stylesheet',
    code: '',
    value: ''
  };
  const {
    css
  } = (0, _buildTaggedTemplate.default)({
    quasiPath: path.get('quasi'),
    nodeMap,
    style,
    location: isSingleClass ? 'RULE' : 'STYLESHEET',
    pluginOptions: opts.defaultedOptions
  });
  style.value = css;
  if (styles.has(style.absoluteFilePath)) throw path.buildCodeFrameError(path.findParent(p => p.isExpressionStatement()) ? `There are multiple anonymous ${tagName} tags that would conflict. Differentiate each tag by assigning the output to a unique identifier` : `There are multiple ${tagName} tags with the same inferred identifier. Differentiate each tag by assigning the output to a unique identifier`);
  styles.set(style.absoluteFilePath, style);
  let runtimeNode = opts.styleImports.add(style);
  style.code = runtimeNode.name;
  style.importIdentifier = runtimeNode.name;
  nodeMap.set(runtimeNode, style);
  if (isSingleClass) {
    runtimeNode = t.memberExpression(runtimeNode, t.identifier('cls2'));
    style.code += '.cls2';
  }
  return runtimeNode;
}
var _default = {
  TaggedTemplateExpression(path, state) {
    const pluginOptions = state.defaultedOptions;
    const tagPath = path.get('tag');
    const isCss = (0, _isCssTag.default)(tagPath, pluginOptions);
    const isStyleSheet = !isCss && (0, _isStylesheetTag.default)(tagPath, pluginOptions);
    if (isCss || isStyleSheet) {
      path.replaceWith(buildStyleRequire(path, state, isCss));
    }
  }
};
exports.default = _default;